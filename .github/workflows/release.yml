name: Release
on:
  push:
    tags:
      - v*
      - pre-rel-*

jobs:
  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let buildNo = context.runNumber;
            let versionName = tag.replace(/^pre-rel-/,'');
            try {
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
            }
            catch(e) {
              let body = ["TODO"].join("\n");

              let release =  await github.request("POST /repos/:owner/:repo/releases", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                data: {
                  tag_name: tag,
                  prerelease: true,
                  body: body,
                  name: `${versionName} #${buildNo}`
                }
              });
              console.log(release.data.upload_url);
            }

  build:
    name: Build Release ${{ matrix.cpu }} ${{ matrix.os }}
    needs:
      - create-release
    runs-on: ${{ matrix.build-on }}
    strategy:
      matrix:
        include:
          - cpu: x86_64
            os: win
            target: x86_64-pc-windows-msvc
            build-on: windows-latest
            use-cross: false
          - cpu: x86_64
            os: linux
            target: x86_64-unknown-linux-musl
            build-on: ubuntu-latest
            use-cross: true
          - cpu: aarch64
            os: linux
            target: aarch64-unknown-linux-musl
            build-on: ubuntu-latest
            use-cross: true
    env:
      OPENSSL_STATIC: 1
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
              let tag = context.payload.ref.replace(/.*\//, '');
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              console.log(release.data.upload_url);
              return release.data.upload_url

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build proxy
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --target ${{ matrix.target }} -p ya-http-proxy --features bin --release
      - name: Build runtime
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --target ${{ matrix.target }} --release
      - name: Pack
        id: pack
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          OS_NAME: ${{ matrix.os }}
          CPU_NAME: ${{ matrix.cpu }}
          TARGET_NAME: ${{ matrix.target }}
        run: |
          if [ "$OS_NAME" == "win" ]; then
            EXE=.exe
          else
            EXE=
          fi
          TAG_NAME="${GITHUB_REF##*/}"
          TARGET_DIR=releases/ya-runtime-http-auth-${CPU_NAME}-${OS_NAME}-${TAG_NAME}

          mkdir -p "$TARGET_DIR/ya-runtime-http-auth"
          if [ "$CPU_NAME" == "x86_64" ]; then
            strip "target/${TARGET_NAME}/release/ya-runtime-http-auth${EXE}"
            strip "target/${TARGET_NAME}/release/ya-http-proxy${EXE}"
          fi

          set -x
          cp target/${TARGET_NAME}/release/ya-runtime-http-auth${EXE} "$TARGET_DIR/ya-runtime-http-auth/"
          cp target/${TARGET_NAME}/release/ya-http-proxy${EXE} "$TARGET_DIR/ya-runtime-http-auth/"
          cp conf/ya-runtime-http-auth.json "$TARGET_DIR/"
          (cd releases && tar czvf "ya-runtime-http-auth-${CPU_NAME}-${OS_NAME}-${TAG_NAME}.tar.gz" "ya-runtime-http-auth-${CPU_NAME}-${OS_NAME}-${TAG_NAME}")

          echo "::set-output name=artifact::ya-runtime-http-auth-${CPU_NAME}-${OS_NAME}-${TAG_NAME}.tar.gz"
          echo "::set-output name=media::application/tar+gzip"

      - name: Upload
        run: echo todo upload ${{ steps.pack.outputs.artifact }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ./releases/${{ steps.pack.outputs.artifact }}
          asset_name: ${{ steps.pack.outputs.artifact }}
          asset_content_type: ${{ steps.pack.outputs.media }}
  build-deb:
    name: Build Deb
    needs:
      - create-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            console.log(release.data.upload_url);
            return release.data.upload_url

      - name: Extract Version
        id: version
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TAGV_NAME="${TAG_NAME#pre-rel-}"
          VERSION=${TAGV_NAME#v}
          echo "::set-output name=tagv::${TAG_NAME}"
          echo "::set-output name=version::${VERSION}"

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Install dependencies
        run: sudo apt-get install -y musl-tools musl dpkg liblzma-dev

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build proxy
        run: |
          cargo build -p ya-http-proxy --features bin --release --target x86_64-unknown-linux-musl

      - name: Build deb
        id: deb
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          OS_NAME: linux
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TAGV_NAME="${TAG_NAME#pre-rel-}"
          VERSION=${TAGV_NAME#v}

          set -euo pipefail

          OUTPUT=$(cargo deb --target x86_64-unknown-linux-musl --deb-version ${VERSION} | tail -n1)
          NAME=$(basename "${OUTPUT}")

          echo "::set-output name=path::${OUTPUT}"
          echo "::set-output name=name::${NAME}"

      - name: Upload Release Deb
        id: upload-release-asset-core
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ${{ steps.deb.outputs.path }}
          asset_name: ${{ steps.deb.outputs.name }}
          asset_content_type: application/vnd.debian.binary-package
